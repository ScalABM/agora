/*
Copyright 2016 ScalABM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package markets.twosided.auctions.continuous

import markets.tradables.orders.ask.LimitAskOrder
import markets.tradables.orders.bid.LimitBidOrder
import markets.tradables.TestTradable
import markets.twosided

import org.apache.commons.math3.{distribution, random, stat}
import org.scalatest.{FlatSpec, Matchers}


class PostedPriceAuctionSpec extends FlatSpec with Matchers {

  // Define a source for randomly generated orders...
  val trader: markets.RandomOrderGenerator = {

    val seed = 42
    val prng = new random.MersenneTwister(seed)

    // specify the sampling distribution for prices (could use different distributions for ask and bid prices...)
    val (minPrice, maxPrice) = (1, 200)
    val askPriceDistribution = new distribution.UniformRealDistribution(prng, minPrice, maxPrice)
    val bidPriceDistribution = new distribution.UniformRealDistribution(prng, minPrice, maxPrice)

    // specify the sampling distribution for quantities could use different distributions for ask and bid quantities...)
    val (minQuantity, maxQuantity) = (1, 1)
    val askQuantityDistribution = new distribution.UniformIntegerDistribution(prng, minQuantity, maxQuantity)
    val bidQuantityDistribution = new distribution.UniformIntegerDistribution(prng, minQuantity, maxQuantity)

    markets.RandomOrderGenerator(prng, askPriceDistribution, askQuantityDistribution, bidPriceDistribution, bidQuantityDistribution)

  }

  // Define a two sided, continuous, posted-price auction...
  val matchingFunction = twosided.matching.BestPriceMatchingFunction[LimitAskOrder, LimitBidOrder]()
  val pricingFunction = twosided.pricing.AveragePricingFunction[LimitAskOrder, LimitBidOrder](weight=0.5)
  val tradable = TestTradable()

  val auction = TestPostedPriceAuction(matchingFunction, pricingFunction, tradable)

  "Average price of a Fill generated by a twosided.auctions.continuous.PostedPriceAuction" should "be (close to!) 100" in {

    // generate a sufficiently large number of random orders...
    val numberOrders = 3000000
    val askOrderProbability = 0.5
    val orders = for { i <- 1 to numberOrders } yield trader.nextLimitOrder(askOrderProbability, tradable)

    // ...feed the orders into the auction mechanism...
    val fills = orders.flatMap {
      case Left(limitAskOrder) => auction.fill(limitAskOrder)
      case Right(limitBidOrder) => auction.fill(limitBidOrder)
    }

    // ...then collect and summarize the results...
    val summaryStatistics = new stat.descriptive.SummaryStatistics()
    fills.foreach(fill => summaryStatistics.addValue(fill.price.toDouble))
    val averageFillPrice = summaryStatistics.getMean.round // probably will not need to round when price is Double!

    // ...print to screen for reference...
    println(summaryStatistics.toString)

    averageFillPrice should be(100)

  }

}
